#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/locket
LOG_DIR=/var/vcap/sys/log/locket
CONF_DIR=/var/vcap/jobs/locket/config
DATA_DIR=/var/vcap/data/locket
TMP_DIR=$DATA_DIR/tmp

PIDFILE=$RUN_DIR/locket.pid

source /var/vcap/packages/pid_utils/pid_utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "locket"

    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    mkdir -p $DATA_DIR
    chown -R vcap:vcap $DATA_DIR

    mkdir -p $TMP_DIR
    chown -R vcap:vcap $TMP_DIR

    if running_in_container; then
        echo "Not setting /proc/sys/net/ipv4 parameters, since I'm running inside a linux container"
    else
        # TCP_FIN_TIMEOUT
        # This setting determines the time that must elapse before TCP/IP can release a closed connection and reuse
        # its resources. During this TIME_WAIT state, reopening the connection to the client costs less than establishing
        # a new connection. By reducing the value of this entry, TCP/IP can release closed connections faster, making more
        # resources available for new connections. Addjust this in the presense of many connections sitting in the
        # TIME_WAIT state:

        echo 10 > /proc/sys/net/ipv4/tcp_fin_timeout

        # TCP_TW_REUSE
        # This allows reusing sockets in TIME_WAIT state for new connections when it is safe from protocol viewpoint.
        # Default value is 0 (disabled). It is generally a safer alternative to tcp_tw_recycle

        echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse
    fi

    # Allowed number of open file descriptors
    ulimit -n 100000

    exec chpst -u vcap:vcap bash -c  '/var/vcap/jobs/locket/bin/locket_as_vcap'

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: locket_ctl {start|stop}"

    ;;

esac
